name: Release Fix Flow

on:
  workflow_dispatch:
    inputs:
      release_version:
        description: 'Release version'
        required: true

jobs:
  run-type-checks:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: npm install

      - name: Run type checks
        run: npm run type-check

  run-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm test

  create-release-fix-branch:
    needs: [run-type-checks, run-tests]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create release fix branch
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git checkout -b releases/${{ github.event.inputs.release_version }}_fix${{ github.run_number }}
          git push origin releases/${{ github.event.inputs.release_version }}_fix${{ github.run_number }}

  build-and-push-docker-image:
    needs: [create-release-fix-branch]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Yandex Container Registry
        run: echo ${{ secrets.YANDEX_OAUTH_TOKEN }} | docker login --username oauth --password-stdin cr.yandex

      - name: Build and push Docker image
        run: |
          docker build -t cr.yandex/${{ secrets.YANDEX_CONTAINER_REGISTRY_ID }}/app:${{ github.event.inputs.release_version }}_fix${{ github.run_number }} .
          docker tag cr.yandex/${{ secrets.YANDEX_CONTAINER_REGISTRY_ID }}/app:${{ github.event.inputs.release_version }}_fix${{ github.run_number }} cr.yandex/${{ secrets.YANDEX_CONTAINER_REGISTRY_ID }}/app:${{ github.event.inputs.release_version }}_latest
          docker push cr.yandex/${{ secrets.YANDEX_CONTAINER_REGISTRY_ID }}/app:${{ github.event.inputs.release_version }}_fix${{ github.run_number }}
          docker push cr.yandex/${{ secrets.YANDEX_CONTAINER_REGISTRY_ID }}/app:${{ github.event.inputs.release_version }}_latest

  create-github-tag:
    needs: [build-and-push-docker-image]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create GitHub tag
        run: |
          git tag ${{ github.event.inputs.release_version }}_fix${{ github.run_number }}
          git push origin ${{ github.event.inputs.release_version }}_fix${{ github.run_number }}

  add-comment-to-issue:
    needs: [create-github-tag]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get previous release tag
        id: get-previous-tag
        run: |
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ || echo "No previous tag")
          echo "PREV_TAG=$PREV_TAG" >> $GITHUB_ENV

      - name: Get list of commits
        id: get-commits
        run: |
          if [ "${{ env.PREV_TAG }}" != "No previous tag" ]; then
            COMMITS=$(git log --pretty=format:"%h - %s" ${{ env.PREV_TAG }}..HEAD)
          else
            COMMITS=$(git log --pretty=format:"%h - %s" HEAD)
          fi
          echo "COMMITS=$COMMITS" >> $GITHUB_ENV

      - name: Set current date
        run: echo "CURRENT_DATE=$(date +%Y-%m-%d)" >> $GITHUB_ENV

      - name: Create GitHub Issue comment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            import { Octokit } from "octokit";
            const octokit = new Octokit({ auth: process.env.GITHUB_TOKEN });

            // Получение списка открытых issues
            const { data: issues } = await octokit.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
            });

            // Находим номер нужного issue по заголовку
            const issueNumber = issues.find(issue => issue.title.startsWith(`Release ${{ github.event.inputs.release_version }}`)).number;

            // Создаем комментарий
            await octokit.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              body: `### Release Fix Information
              - **Date**: ${process.env.CURRENT_DATE}
              - **Author**: ${github.actor}
              - **Commits**:
              ${process.env.COMMITS}
              - **Docker image**: cr.yandex/${{ secrets.YANDEX_CONTAINER_REGISTRY_ID }}/app:${{ github.event.inputs.release_version }}_fix${{ github.run_number }}`
            });
